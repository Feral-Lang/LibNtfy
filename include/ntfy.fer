let io = import('std/io');
let os = import('std/os');
let map = import('std/map');
let vec = import('std/vec');

inline if os.name == 'windows' {
let ntfyBin = os.findExec('ntfy.exe');
} else {
let ntfyBin = os.findExec('ntfy');
}
# ntfy publish -k "$NTFY_TOKEN" -p high -T green_circle,computer,"$TARGET_HOSTNAME",connstate -t 'Network connection is back!'
#   $NTFY_SERVER/$NTFY_TOPIC_NAME 'Connection is successful!'

if ntfyBin == nil {
	io.eprintln('[ERROR] Ntfy binary not found! Please install that first!');
	feral.exit(1);
}

let Priority = struct(
	MAX = 'MAX',
	HIGH = 'HIGH',
	DEFAULT = 'DEFAULT',
	LOW = 'LOW',
	MIN = 'MIN'
)();

let NtfyCon = struct(
	server = '',
	token = '',
	topic = ''
);
NtfyCon.setTypeName('NtfyCon');

let new = fn(server, token, topic) { return NtfyCon(server, token, topic); };

let testCon in NtfyCon = fn() {
	let tagStr = genTagStr('❕');
	return self.publish(Priority.DEFAULT, 'This is a test title', 'Just a connection test message', tagStr);
};

let publish in NtfyCon = fn(priority, title, msg, tagStr) {
	let cmd = vec.new('ntfy', 'publish', '-k', self.token, '-p', priority, '-T', tagStr,
			  '-t', title, self.server + '/' + self.topic, msg);
	let res = map.new(refs = true);
	let output = '';
	res.insert('exitcode', os.exec(cmd, out = output));
	res.insert('result', output);
	return res;
};

let setTopic in NtfyCon = fn(topic) {
	self.topic = topic;
};

# Utility functions

let genTagStr = fn(items...) {
	let res = '';
	for item in items.each() {
		res += item;
		res += ',';
	}
	if items.len() > 0 { res.pop(); }
	return res;
};